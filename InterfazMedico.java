
package interfaz;

import datos.Conexion;
import dominios.Medico;
import datos.medicoJDBC;
import java.sql.Connection;
import java.sql.Date;
import java.time.LocalDate;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Instant;
import java.time.ZoneId;
import javax.swing.JOptionPane;
import java.util.ArrayList;

public class InterfazMedico extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterfazMedico
     */
    public InterfazMedico() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codigoTarjetaProfesionalTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        especialidadTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        a単osExperienciaSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        consultorioTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        domicilioComboBox = new javax.swing.JComboBox<>();
        eliminarButton = new javax.swing.JButton();
        actualizarButton = new javax.swing.JButton();
        agregarButton = new javax.swing.JButton();
        historialButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("CRUD Medicos");

        jLabel1.setText("Codigo Tarjeta Profesional:");

        codigoTarjetaProfesionalTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigoTarjetaProfesionalTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Especialidad:");

        jLabel3.setText("A単os de Experiencia:");

        jLabel4.setText("Consultorio:");

        jLabel5.setText("Atiende a Domicilio:");

        domicilioComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SI", "NO" }));
        domicilioComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domicilioComboBoxActionPerformed(evt);
            }
        });

        eliminarButton.setText("Eliminar");
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        actualizarButton.setText("Actualizar");
        actualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarButtonActionPerformed(evt);
            }
        });

        agregarButton.setText("Agregar");
        agregarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarButtonActionPerformed(evt);
            }
        });

        historialButton.setText("Historial");
        historialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historialButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(codigoTarjetaProfesionalTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(especialidadTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(a単osExperienciaSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(domicilioComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(consultorioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(agregarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actualizarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eliminarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(historialButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoTarjetaProfesionalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(especialidadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(a単osExperienciaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(consultorioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(domicilioComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarButton)
                    .addComponent(actualizarButton)
                    .addComponent(eliminarButton)
                    .addComponent(historialButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codigoTarjetaProfesionalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigoTarjetaProfesionalTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codigoTarjetaProfesionalTextFieldActionPerformed

    private void domicilioComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domicilioComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_domicilioComboBoxActionPerformed

    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Medico medico = new Medico();
            medicoJDBC objetoMedicoJDBC = new medicoJDBC();
            
            ZoneId defaultZoneId = ZoneId.systemDefault();
            LocalDate fechaActual = LocalDate.now();
            java.util.Date fechaActualDate = Date.from(fechaActual.atStartOfDay(defaultZoneId).toInstant());
            
            Conexion enlace = new Conexion();
            Connection connect;
            connect = enlace.getConnection();
            
            ArrayList datos = new ArrayList();
            ArrayList fechas = new ArrayList();
            
            medico.setCodigoTarjetaProfesional(codigoTarjetaProfesionalTextField.getText());
            Statement leer = connect.createStatement();
            boolean eliminarBool = true;
            ResultSet resultado = leer.executeQuery("SELECT Medico FROM paciente");
            
            while(resultado.next()){
                datos.add(resultado.getString(1));
            }
            resultado = leer.executeQuery("SELECT FechaHoraNuevaCita FROM paciente");
            while(resultado.next()){
                fechas.add(resultado.getDate("FechaHoraNuevaCita"));
            }
            
            for(int i=0;i<datos.size();i++){
                Date fecha = (Date) fechas.get(i);
                if(datos.get(i).equals(codigoTarjetaProfesionalTextField.getText())){//Son iguales, entonces si el medico esta en paciente, hay que mirar las fechas
                    if(fecha.compareTo(fechaActualDate) >= 0){//si la fecha de la cita es mayor o igual, no se puede borrar
                        JOptionPane.showMessageDialog(null, "No se puede borrar porque tiene citas pendientes\n debe eliminar el historial si desea borrarlo");
                        eliminarBool = false;
                        return;
                    }
                }else{
                    //System.out.println("datos: "+datos.get(i)+" Codigo Tarjeta: "+codigoTarjetaProfesionalTextField.getText());
                    objetoMedicoJDBC.delete(medico);
                    JOptionPane.showMessageDialog(this,"Eliminado correctamente en la tabla medicos" , "Eliminado correctamente", 1);
                    return;
                }
            }
            if(eliminarBool){
                objetoMedicoJDBC.delete(medico);
                JOptionPane.showMessageDialog(this,"Eliminado correctamente en la tabla medicos" , "Eliminado correctamente", 1);
            }
            
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,ex,"Error en Eliminar", 1);
        }
    }//GEN-LAST:event_eliminarButtonActionPerformed

    private void actualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarButtonActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            int aniosExperiencia = (int)a単osExperienciaSpinner.getValue();
            String domicilio = (String)domicilioComboBox.getSelectedItem();
            Medico medico = new Medico();
            medicoJDBC objetoMedicoJDBC = new medicoJDBC();

            medico.setCodigoTarjetaProfesional(codigoTarjetaProfesionalTextField.getText());
            medico.setEspecialidad(especialidadTextField.getText());
            medico.setAniosExperiencia(aniosExperiencia);
            medico.setConsultorio(consultorioTextField.getText());
            medico.setDomicilio(domicilio);

            objetoMedicoJDBC.update(medico);
            JOptionPane.showMessageDialog(this,"actualizado correctamente en la tabla medicos" , "Actualizado correctamete", 1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,ex,"Error en Actualizar", 1);
        }
    }//GEN-LAST:event_actualizarButtonActionPerformed

    private void agregarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarButtonActionPerformed
        try {
            // TODO add your handling code here:
            int aniosExperiencia = (int)a単osExperienciaSpinner.getValue();
            String domicilio = (String)domicilioComboBox.getSelectedItem();
            Medico medico = new Medico();
            medicoJDBC objetoMedicoJDBC = new medicoJDBC();

            medico.setCodigoTarjetaProfesional(codigoTarjetaProfesionalTextField.getText());
            medico.setEspecialidad(especialidadTextField.getText());
            medico.setAniosExperiencia(aniosExperiencia);
            medico.setConsultorio(consultorioTextField.getText());
            medico.setDomicilio(domicilio);

            objetoMedicoJDBC.insert(medico);
            JOptionPane.showMessageDialog(this,"insertado correctamente en la tabla medicos" , "Insertar correctamete", 1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,ex , "Error en Insertar", 1);
        }

    }//GEN-LAST:event_agregarButtonActionPerformed

    private void historialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historialButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_historialButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarButton;
    private javax.swing.JButton agregarButton;
    private javax.swing.JSpinner a単osExperienciaSpinner;
    private javax.swing.JTextField codigoTarjetaProfesionalTextField;
    private javax.swing.JTextField consultorioTextField;
    private javax.swing.JComboBox<String> domicilioComboBox;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JTextField especialidadTextField;
    private javax.swing.JButton historialButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
